---
import Pagination from "@components/Pagination/Pagination.astro";
import Layout from "@layouts/Layout.astro";
import { countReviewsByDates, findReviews } from "@server/reviews";
import { paths } from "@utils/paths";
import { ReviewSearch } from "@modules/reviews/ReviewSearch/ReviewSearch";
import EmptyPlaceholder from "@modules/common/EmptyPlaceholder/EmptyPlaceholder.astro";
import ReviewActivity from "@modules/ReviewActivity/ReviewActivity.astro";
import {
  integer,
  literal,
  maxValue,
  minValue,
  number,
  object,
  optional,
  safeParseAsync,
  string,
  union,
} from "valibot";

const session = Astro.locals.session;

if (!session) {
  return Astro.redirect(paths.login);
}

const parseResult = await safeParseAsync(
  object({
    lower: optional(number([minValue(0), maxValue(10)])),
    page: optional(number([minValue(0), integer()])),
    query: optional(string()),
    upper: optional(number([minValue(0), maxValue(10)])),
    order: optional(union([literal("createdAt"), literal("rate")])),
  }),
  Object.fromEntries(Astro.url.searchParams.entries()),
);

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const take = 20;
const page = parseResult.output.page || 0;
const lower = parseResult.output.lower || 0;
const query = parseResult.output.query || "";
const upper = parseResult.output.upper || 10;
const order = parseResult.output.order || "createdAt";

const [{ count, reviews }, { groups }] = await Promise.all([
  findReviews({
    skip: take * page,
    take,
    userId: session.userId,
  }),
  countReviewsByDates({
    userId: session.userId,
  }),
]);

const maxPage = Math.ceil(count / take);
---

<Layout title="Reviews" userId={session.userId}>
  <main class="p-4 flex flex-col gap-4">
    <div class="card bg-base-300 card-compact">
      <div class="card-body">
        <ReviewActivity groups={groups} />
      </div>
    </div>
    <div class="card bg-base-300 card-compact">
      <div class="card-body flex gap-2">
        <ReviewSearch
          client:idle
          lower={lower}
          upper={upper}
          query={query}
          order={order}
        />
      </div>
    </div>
    <!-- <CardGrid>
      {
        reviews.map((review) => (
          <ReviewCard
            album={review.album}
            artist={review.album.artist}
            review={review}
            userId={session.userId}
          />
        ))
      }
    </CardGrid> -->
    {reviews.length === 0 && <EmptyPlaceholder />}
    <Pagination
      current={page}
      maxPage={maxPage}
      nextHref={paths.reviews({ page: page + 1 })}
      prevHref={paths.reviews({ page: page - 1 })}
    />
  </main>
</Layout>
