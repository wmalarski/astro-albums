---
import Pagination from "@components/Pagination/Pagination.astro";
import ReviewCard from "@components/ReviewCard/ReviewCard.astro";
import Layout from "@layouts/Layout.astro";
import { findReviews } from "@server/reviews";
import { paths } from "@utils/paths";
import { getUser, updateSessionHeaders } from "@server/supabase";
import { z } from "zod";

const { user, session } = await getUser(Astro.request);

if (!user) {
  return Astro.redirect("/login");
}

updateSessionHeaders(Astro.response.headers, session);

const parseResult = z
  .object({
    page: z.number().min(0).int().nullable(),
    query: z.string().nullable(),
  })
  .safeParse({
    page: Astro.url.searchParams.get("page"),
    query: Astro.url.searchParams.get("query"),
  });

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const take = 20;
const page = parseResult.data.page || 0;

const reviews = await findReviews({ skip: take * page, take, userId: user.id });

const maxPage = Math.ceil(reviews.count / take);
---

<Layout title="Reviews" user={user}>
  <main class="p-4 flex flex-col gap-4">
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
      {
        reviews.reviews.map((review) => (
          <ReviewCard
            album={review.album}
            artist={review.album.artist}
            review={review}
          />
        ))
      }
    </div>
    <Pagination
      current={page}
      maxPage={maxPage}
      nextHref={paths.reviews({ page: page + 1 })}
      prevHref={paths.reviews({ page: page - 1 })}
    />
  </main>
</Layout>
