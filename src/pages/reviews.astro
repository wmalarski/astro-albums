---
import Pagination from "@components/Pagination/Pagination.astro";
import Layout from "@layouts/Layout.astro";
import { countReviewsByDates, findReviews } from "@server/reviews";
import { paths } from "@utils/paths";
import ReviewSearch from "@modules/reviews/ReviewSearch.astro";
import EmptyPlaceholder from "@modules/common/EmptyPlaceholder.astro";
import ReviewActivity from "@modules/reviews/ReviewActivity/ReviewActivity.astro";
import CardGrid from "@modules/common/CardGrid.astro";
import ReviewCard from "@modules/reviews/ReviewCard/ReviewCard.astro";
import { Card, CardBody } from "@components/Card/Card";
import { z } from "astro:actions";

const session = Astro.locals.session;

paths;
if (!session) {
  return Astro.redirect(paths.login);
}

const params = Object.fromEntries(Astro.url.searchParams.entries());
const parseResult = await z
  .object({
    lower: z.coerce.number().min(0).max(10).default(0),
    page: z.coerce.number().min(0).int().default(0),
    query: z.string().default(""),
    upper: z.coerce.number().min(0).max(10).default(10),
    order: z
      .union([z.literal("createdAt"), z.literal("rate")])
      .default("createdAt"),
  })
  .safeParseAsync(params);

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const take = 20;
const { lower, order, page, query, upper } = parseResult.data;

const [{ count, reviews }, groups] = await Promise.all([
  findReviews({ skip: take * page, take }),
  countReviewsByDates(),
]);

const maxPage = Math.ceil(count.length / take);
---

<Layout title="Reviews" userId={session.userId}>
  <main class="p-4 flex flex-col gap-4">
    <Card bg="base-300" size="compact">
      <CardBody>
        <ReviewActivity groups={groups} />
      </CardBody>
    </Card>
    <Card bg="base-300" size="compact">
      <div class="card-body flex gap-2">
        <ReviewSearch
          client:idle
          lower={lower}
          upper={upper}
          query={query}
          order={order}
        />
      </div>
    </Card>
    <CardGrid>
      {
        reviews.map((entry) => (
          <ReviewCard
            album={entry.Album}
            artist={entry.Artist}
            review={entry.Review}
          />
        ))
      }
    </CardGrid>
    {reviews.length === 0 && <EmptyPlaceholder />}
    <Pagination
      current={page}
      maxPage={maxPage}
      nextHref={paths.reviews({ ...parseResult.data, page: page + 1 })}
      prevHref={paths.reviews({ ...parseResult.data, page: page - 1 })}
    />
  </main>
</Layout>
