---
import Pagination from "@components/Pagination/Pagination.astro";
import ReviewCard from "@components/ReviewCard/ReviewCard.astro";
import Layout from "@layouts/Layout.astro";
import { countReviewsByDates, findReviews } from "@server/reviews";
import { paths } from "@utils/paths";
import { getUser, updateSessionHeaders } from "@server/supabase";
import { z } from "zod";
import { ReviewSearch } from "@components/ReviewSearch/ReviewSearch";
import CardGrid from "@components/CardGrid/CardGrid.astro";
import EmptyPlaceholder from "@components/EmptyPlaceholder/EmptyPlaceholder.astro";
import ReviewActivity from "@modules/reviews/ReviewActivity/ReviewActivity.astro";

const { user, session } = await getUser(Astro.request);

if (!user) {
  return Astro.redirect(paths.login);
}

updateSessionHeaders(Astro.response.headers, session);

const parseResult = z
  .object({
    lower: z.number().min(0).max(10).nullable(),
    page: z.number().min(0).int().nullable(),
    query: z.string().nullable(),
    upper: z.number().min(0).max(10).nullable(),
    order: z.union([z.literal("createdAt"), z.literal("rate")]).nullable(),
  })
  .safeParse({
    lower: Astro.url.searchParams.get("page"),
    page: Astro.url.searchParams.get("page"),
    query: Astro.url.searchParams.get("query"),
    upper: Astro.url.searchParams.get("page"),
    order: Astro.url.searchParams.get("order"),
  });

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const take = 20;
const page = parseResult.data.page || 0;
const lower = parseResult.data.lower || 0;
const query = parseResult.data.query || "";
const upper = parseResult.data.upper || 10;
const order = parseResult.data.order || "createdAt";

const [{ count, reviews }, { groups }] = await Promise.all([
  findReviews({
    skip: take * page,
    take,
    userId: user.id,
  }),
  countReviewsByDates({
    userId: user.id,
  }),
]);

const maxPage = Math.ceil(count / take);
---

<Layout title="Reviews" user={user}>
  <main class="p-4 flex flex-col gap-4">
    <div class="card bg-base-300 card-compact">
      <div class="card-body">
        <ReviewActivity groups={groups} />
      </div>
    </div>
    <div class="card bg-base-300 card-compact">
      <div class="card-body flex gap-2">
        <ReviewSearch
          client:idle
          lower={lower}
          upper={upper}
          query={query}
          order={order}
        />
      </div>
    </div>
    <CardGrid>
      {
        reviews.map((review) => (
          <ReviewCard
            album={review.album}
            artist={review.album.artist}
            review={review}
          />
        ))
      }
    </CardGrid>
    {reviews.length === 0 && <EmptyPlaceholder />}
    <Pagination
      current={page}
      maxPage={maxPage}
      nextHref={paths.reviews({ page: page + 1 })}
      prevHref={paths.reviews({ page: page - 1 })}
    />
  </main>
</Layout>
