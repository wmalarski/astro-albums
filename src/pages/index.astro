---
import Layout from "@layouts/Layout.astro";
import AlbumSearch from "@modules/albums/AlbumSearch/AlbumSearch.astro";
import CardGrid from "@modules/common/CardGrid/CardGrid.astro";
import {
  integer,
  minValue,
  number,
  object,
  optional,
  safeParseAsync,
  string,
} from "valibot";
import { findHomepageAlbums } from "@server/albums";
import AlbumCard from "@modules/albums/AlbumCard/AlbumCard.astro";
import EmptyPlaceholder from "@modules/common/EmptyPlaceholder/EmptyPlaceholder.astro";

const session = Astro.locals.session;

if (!session) {
  return Astro.redirect("/login");
}

const parseResult = await safeParseAsync(
  object({
    page: optional(number([minValue(0), integer()]), 0),
    query: optional(string(), ""),
  }),
  Object.fromEntries(Astro.url.searchParams.entries()),
);

if (!parseResult.success) {
  return Astro.redirect("/error");
}

const take = 20;
const page = parseResult.output.page;
const query = parseResult.output.query;
const skip = take * page;

const data = await findHomepageAlbums({
  query,
  skip,
  userId: session.userId,
  take,
});
---

<Layout title="Welcome to Astro." userId={session.userId}>
  <main class="p-4 flex flex-col gap-4">
    <div class="card bg-base-300 card-compact">
      <div class="card-body flex gap-2">
        <AlbumSearch query={query} />
      </div>
    </div>
    <CardGrid>
      {
        data.map((entry) => (
          <AlbumCard
            album={entry.Album}
            artist={entry.Artist}
            userId={session.userId}
          />
        ))
      }
    </CardGrid>
    {data.length === 0 && <EmptyPlaceholder />}
    <!-- {
      data.kind === "query" ? (
        <Pagination
          current={page}
          maxPage={maxPage}
          nextHref={paths.index({ page: page + 1 })}
          prevHref={paths.index({ page: page - 1 })}
        />
      ) : null
    } -->
  </main>
</Layout>
