---
import Layout from "@layouts/Layout.astro";
import { AlbumSearch } from "@modules/AlbumSearch/AlbumSearch";
import { paths } from "@utils/paths";
import CardGrid from "@components/CardGrid/CardGrid.astro";
import {
  integer,
  minValue,
  number,
  object,
  optional,
  safeParseAsync,
  string,
} from "valibot";

const session = Astro.locals.session;

if (!session) {
  return Astro.redirect(paths.login);
}

const parseResult = await safeParseAsync(
  object({
    page: optional(number([minValue(0), integer()])),
    query: optional(string()),
  }),
  Object.fromEntries(Astro.url.searchParams.entries())
);

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

// const take = 20;
// const page = parseResult.output.page || 0;
const query = parseResult.output.query || "";

// const findContent = async () => {
//   if (query) {
//     const { albums, count } = await findAlbums({
//       query,
//       skip: take * page,
//       take,
//       userId: session.user.id,
//     });
//     return { albums, count, kind: "query" };
//   }

//   const { albums } = await findRandomAlbums({
//     take: take,
//     userId: session.user.id,
//   });

//   return { albums, kind: "random" };
// };

// const data = await findContent();

// const { albums } = data;

// const maxPage = Math.ceil((data.count || 0) / take);
---

<Layout title="Welcome to Astro." user={session.user}>
  <main class="p-4 flex flex-col gap-4">
    <div class="card bg-base-300 card-compact">
      <div class="card-body flex gap-2">
        <AlbumSearch client:idle query={query} />
      </div>
    </div>
    <CardGrid>
      <!-- {
        albums.map((album) => (
          <AlbumCard
            album={album}
            artist={album.artist}
            reviews={album.reviews}
            userId={session.user.id}
          />
        ))
      } -->
    </CardGrid>
    <!-- {albums.length === 0 && <EmptyPlaceholder />}
    {
      data.kind === "query" ? (
        <Pagination
          current={page}
          maxPage={maxPage}
          nextHref={paths.index({ page: page + 1 })}
          prevHref={paths.index({ page: page - 1 })}
        />
      ) : null
    } -->
  </main>
</Layout>
