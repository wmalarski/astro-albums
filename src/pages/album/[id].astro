---
import Layout from "@layouts/Layout.astro";
import { findAlbum } from "@server/albums";
import { jsonToCoversField } from "@server/coverArt";
import { formatAlbum } from "@utils/format";
import { paths } from "@utils/paths";
import AlbumActions from "@modules/albums/AlbumActions/AlbumActions.astro";
import EmptyPlaceholder from "@modules/common/EmptyPlaceholder/EmptyPlaceholder.astro";
import CoversCarousel from "@modules/common/CoversCarousel/CoversCarousel.astro";
import { minLength, object, safeParseAsync, string } from "valibot";
import CardGrid from "@modules/common/CardGrid/CardGrid.astro";
import AlbumCard from "@modules/albums/AlbumCard/AlbumCard.astro";
import ReviewCard from "@modules/reviews/ReviewCard/ReviewCard.astro";

const session = Astro.locals.session;

if (!session) {
  return Astro.redirect(paths.login);
}

const parseResult = await safeParseAsync(
  object({ id: string([minLength(1)]) }),
  Astro.params,
);

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const { album, albums, reviews, artist } = await findAlbum({
  id: parseResult.output.id,
  userId: session.userId,
});

console.log({ album, albums, reviews, artist });

if (!album || !artist) {
  return Astro.redirect(paths.notFound);
}

const header = formatAlbum({ album, artist });
const covers = jsonToCoversField(album.covers);
---

<Layout title={`${header} - Astro Albums`} userId={session.userId}>
  <main class="p-4 flex flex-col gap-4">
    <h2 class="text-xl font-bold">Album</h2>
    <article class="card card-side bg-base-300 w-full min-h-[250px]">
      <figure class="max-w-[500px]">
        <CoversCarousel covers={covers.large} header={header} />
      </figure>
      <div class="card-body">
        <h3 class="card-title">{header}</h3>
        <AlbumActions
          album={album}
          artist={artist}
          deleteRedirect={paths.index()}
        />
      </div>
    </article>
    <h2 class="text-xl font-bold">Albums</h2>
    <CardGrid>
      {albums.map((entry) => <AlbumCard album={entry} artist={artist} />)}
    </CardGrid>
    {albums.length === 0 && <EmptyPlaceholder />}
    <h2 class="text-xl font-bold">Reviews</h2>
    <CardGrid>
      {
        reviews.map((entry) => (
          <ReviewCard review={entry} album={album} artist={artist} />
        ))
      }
    </CardGrid>
    {reviews.length === 0 && <EmptyPlaceholder />}
  </main>
</Layout>
