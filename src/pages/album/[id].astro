---
import Layout from "@layouts/Layout.astro";
import { findAlbum } from "@server/albums";
import { findReviewsByArtist } from "@server/reviews";
import { getUser, updateSessionHeaders } from "@server/supabase";
import { jsonToCoversField } from "@server/coverArt";
import { formatAlbum } from "@utils/format";
import { z } from "zod";
import { paths } from "@utils/paths";
import AlbumActions from "@modules/AlbumActions/AlbumActions.astro";
import AlbumCard from "@modules/AlbumCard/AlbumCard.astro";
import ReviewCard from "@modules/ReviewCard/ReviewCard.astro";
import CardGrid from "@components/CardGrid/CardGrid.astro";
import EmptyPlaceholder from "@components/EmptyPlaceholder/EmptyPlaceholder.astro";
import CoversCarousel from "@components/CoversCarousel/CoversCarousel.astro";

const { user, session } = await getUser(Astro.request);

if (!user) {
  return Astro.redirect(paths.login);
}

updateSessionHeaders(Astro.response.headers, session);

const parseResult = z
  .object({
    id: z.string().min(1),
  })
  .safeParse({
    id: Astro.params.id,
  });

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const id = parseResult.data.id;

const { album, albums } = await findAlbum({ id, userId: user.id });

if (!album) {
  return Astro.redirect(paths.notFound);
}
const { reviews } = await findReviewsByArtist({
  artistId: album.artistId,
  skip: 0,
  take: 20,
  userId: user.id,
});

const header = formatAlbum({ album, artist: album.artist });

const covers = jsonToCoversField(album.covers);
---

<Layout title={`${header} - Astro Albums`} user={user}>
  <main class="p-4 flex flex-col gap-4">
    <span class="relative hidden" aria-hidden="true">
      {paths.login}
    </span>
    <h2 class="text-xl font-bold">Album</h2>
    <article class="card card-side bg-base-300 w-full">
      <figure class="max-w-[500px]">
        <CoversCarousel covers={covers.large} header={header} />
      </figure>
      <div class="card-body">
        <h3 class="card-title">{header}</h3>
        <AlbumActions album={album} artist={album.artist} />
      </div>
    </article>
    <h2 class="text-xl font-bold">Albums</h2>
    <CardGrid>
      {
        albums.map((entry) => (
          <AlbumCard
            album={entry}
            artist={album.artist}
            reviews={entry.reviews}
          />
        ))
      }
    </CardGrid>
    {albums.length === 0 && <EmptyPlaceholder />}
    <h2 class="text-xl font-bold">Reviews</h2>
    <CardGrid>
      {
        reviews.map((entry) => (
          <ReviewCard
            review={entry}
            album={entry.album}
            artist={album.artist}
          />
        ))
      }
    </CardGrid>
    {reviews.length === 0 && <EmptyPlaceholder />}
  </main>
</Layout>
