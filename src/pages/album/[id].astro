---
import Layout from "@layouts/Layout.astro";
import { findAlbum } from "@server/albums";
import { findReviewsByArtist } from "@server/reviews";
import { jsonToCoversField } from "@server/coverArt";
import { formatAlbum } from "@utils/format";
import { paths } from "@utils/paths";
import AlbumActions from "@modules/albums/AlbumActions/AlbumActions.astro";
import EmptyPlaceholder from "@modules/common/EmptyPlaceholder/EmptyPlaceholder.astro";
import CoversCarousel from "@modules/common/CoversCarousel/CoversCarousel.astro";
import { minLength, object, safeParseAsync, string } from "valibot";

const session = Astro.locals.session;

if (!session) {
  return Astro.redirect(paths.login);
}

const parseResult = await safeParseAsync(
  object({ id: string([minLength(1)]) }),
  Astro.params,
);

console.log(parseResult)

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const id = parseResult.output.id;
const { album, albums } = await findAlbum({ id, userId: session.userId });

console.log({album, albums})

if (!album) {
  return Astro.redirect(paths.notFound);
}

const { reviews } = await findReviewsByArtist({
  artistId: album.artistId,
  skip: 0,
  take: 20,
  userId: session.userId,
});

const header = formatAlbum({ album, artist: album.artist });
const covers = jsonToCoversField(album.covers);
---

<Layout title={`${header} - Astro Albums`} userId={session.userId}>
  <main class="p-4 flex flex-col gap-4">
    <h2 class="text-xl font-bold">Album</h2>
    <article class="card card-side bg-base-300 w-full min-h-[250px]">
      <figure class="max-w-[500px]">
        <CoversCarousel covers={covers.large} header={header} />
      </figure>
      <div class="card-body">
        <h3 class="card-title">{header}</h3>
        <AlbumActions
          album={album}
          artist={album.artist}
          deleteRedirect={paths.index()}
          userId={session.userId}
        />
      </div>
    </article>
    <h2 class="text-xl font-bold">Albums</h2>
    <!-- <CardGrid>
      {
        albums.map((entry) => (
          <AlbumCard
            album={entry}
            artist={album.artist}
            reviews={entry.reviews}
            userId={session.userId}
          />
        ))
      }
    </CardGrid> -->
    {albums.length === 0 && <EmptyPlaceholder />}
    <h2 class="text-xl font-bold">Reviews</h2>
    <!-- <CardGrid>
      {
        reviews.map((entry) => (
          <ReviewCard
            review={entry}
            album={entry.album}
            artist={album.artist}
            userId={session.userId}
          />
        ))
      }
    </CardGrid> -->
    {reviews.length === 0 && <EmptyPlaceholder />}
  </main>
</Layout>
