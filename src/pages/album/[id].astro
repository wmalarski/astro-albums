---
import Layout from "@layouts/Layout.astro";
import { findAlbum } from "@server/albums";
import { getUser, updateSessionHeaders } from "@server/supabase";
import { frontCover } from "@server/coverArt";
import { formatAlbum } from "@utils/format";
import { z } from "zod";
import { paths } from "@utils/paths";
import AlbumActions from "@components/AlbumActions/AlbumActions.astro";
import AlbumReviewsCard from "@components/AlbumReviewsCard/AlbumReviewsCard.astro";

const { user, session } = await getUser(Astro.request);

if (!user) {
  return Astro.redirect(paths.login);
}

updateSessionHeaders(Astro.response.headers, session);

const parseResult = z
  .object({
    id: z.string().min(1),
  })
  .safeParse({
    id: Astro.params.id,
  });

if (!parseResult.success) {
  return Astro.redirect(paths.error);
}

const id = parseResult.data.id;

const { album, albums } = await findAlbum({ id, userId: user.id });

if (!album) {
  return Astro.redirect(paths.notFound);
}

const title = formatAlbum({ album, artist: album.artist });
---

<Layout title={`${title} - Astro Albums`} user={user}>
  <main class="p-4 flex flex-col gap-4">
    <span>
      {paths.login}
    </span>
    <span></span>
    <article class="card card-side bg-base-300 w-full">
      <figure>
        <img src={frontCover(album.sid, 500)} alt={title} />
      </figure>
      <div class="card-body">
        <h3 class="card-title">{title}</h3>
        <AlbumActions album={album} artist={album.artist} />
      </div>
    </article>
    <div class="grid grid-cols-1 gap-4">
      {
        albums.map((entry) => (
          <AlbumReviewsCard
            album={entry}
            artist={album.artist}
            reviews={album.reviews}
          />
        ))
      }
    </div>
  </main>
</Layout>
